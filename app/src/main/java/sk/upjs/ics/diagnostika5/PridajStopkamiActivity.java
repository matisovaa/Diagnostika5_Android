package sk.upjs.ics.diagnostika5;

/*
* Zdroje:
* http://www.android-examples.com/android-create-stopwatch-example-tutorial-in-android-studio/
*
* */

import android.app.AlertDialog;
import android.content.AsyncQueryHandler;
import android.content.ContentValues;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.SystemClock;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.TextView;
import android.widget.Toast;

import com.facebook.stetho.Stetho;

import butterknife.BindView;
import butterknife.ButterKnife;
import sk.upjs.ics.diagnostika5.databaza.Provider;

public class PridajStopkamiActivity extends AppCompatActivity {

    @BindView(R.id.menoPridajSEditText)
    EditText menoPridajSEditText;
    @BindView(R.id.stopkyTextView)
    TextView stopkyTextView;
    @BindView(R.id.startButton)
    Button startButton;
    @BindView(R.id.resetButton)
    Button resetButton;
    @BindView(R.id.pauseButton)
    Button pauseButton;
    @BindView(R.id.zmazButton)
    Button zmazButton;
    @BindView(R.id.ulozButton)
    Button ulozButton;
    @BindView(R.id.hodnotyStopovaneGridView)
    GridView hodnotyStopovaneGridView;
    @BindView(R.id.poznamkaPridajSEditText)
    EditText poznamkaPridajSEditText;

    Handler handler;
    ArrayAdapter<String> adapter;
    Zaznam zaznam;

    public static final String AUTOGENERATED_ID = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pridaj_stopkami);

        ButterKnife.bind(this);
        Stetho.initializeWithDefaults(this);

        handler = new Handler();

        if (savedInstanceState != null){
            zaznam = (Zaznam) savedInstanceState.getSerializable("zaznam");
        }else{
            zaznam = new Zaznam();
        }

        adapter = new ArrayAdapter<>(this, R.layout.grid_item);
        refreshAdapter();
        hodnotyStopovaneGridView.setAdapter(adapter);

        stopkyTextView.setText(String.format("%01d", zaznam.getSeconds()));

        if(zaznam.isSpusteneStopky()){
            handler.postDelayed(runnable, 0);

            startButton.setEnabled(false);
            resetButton.setEnabled(false);
            pauseButton.setEnabled(true);
            zmazButton.setEnabled(true);
            ulozButton.setEnabled(false);
        }else if(zaznam.isPauznuteStopky()){

            startButton.setEnabled(true);
            resetButton.setEnabled(true);
            pauseButton.setEnabled(false);
            zmazButton.setEnabled(true);
            ulozButton.setEnabled(true);

        }else{
            startButton.setEnabled(true);
            resetButton.setEnabled(false);
            pauseButton.setEnabled(false);
            zmazButton.setEnabled(true);
            ulozButton.setEnabled(false);
        }

        startButton.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                zaznam.setSpusteneStopky(true);
                zaznam.setPauznuteStopky(false);

                zaznam.setStartTime(SystemClock.uptimeMillis());
                handler.postDelayed(runnable, 0);

                startButton.setEnabled(false);
                resetButton.setEnabled(false);
                pauseButton.setEnabled(true);
                zmazButton.setEnabled(true);
                ulozButton.setEnabled(false);
            }
        });

        resetButton.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                resetStopiek();

                startButton.setEnabled(true);
                resetButton.setEnabled(false);
                pauseButton.setEnabled(false);
                zmazButton.setEnabled(true);
                ulozButton.setEnabled(false);
            }
        });

        pauseButton.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                zaznam.setSpusteneStopky(false);
                zaznam.setPauznuteStopky(true);

                zaznam.setTimeBuff(zaznam.getTimeBuff()+zaznam.getMillisecondTime());

                handler.removeCallbacks(runnable);

                startButton.setEnabled(true);
                resetButton.setEnabled(true);
                pauseButton.setEnabled(false);
                zmazButton.setEnabled(true);
                ulozButton.setEnabled(true);
            }
        });

        zmazButton.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                zaznam.odoberHodnotu();
                refreshAdapter();
            }
        });

        ulozButton.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View v) {
                zaznam.pridajHodnotu(Integer.parseInt(stopkyTextView.getText().toString()));
                zaznam.setPauznuteStopky(false);
                zaznam.setSpusteneStopky(false);

                refreshAdapter();
                resetStopiek();

                startButton.setEnabled(true);
                resetButton.setEnabled(false);
                pauseButton.setEnabled(false);
                zmazButton.setEnabled(true);
                ulozButton.setEnabled(false);
            }
        });
    }

    private void refreshAdapter() {
        this.adapter.clear();
        this.adapter.addAll(zaznam.getHodnotyPreGridView());
    }

    private void resetStopiek(){
        zaznam.setPauznuteStopky(false);
        zaznam.setSpusteneStopky(false);

        zaznam.setMillisecondTime(0);
        zaznam.setStartTime(0);
        zaznam.setTimeBuff(0);
        zaznam.setUpdateTime(0);
        zaznam.setSeconds(0);

        stopkyTextView.setText("0");
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putSerializable("zaznam",zaznam);
    }

    public Runnable runnable = new Runnable() {

        public void run() {

            if(!zaznam.isPauznuteStopky()){

                zaznam.setMillisecondTime(SystemClock.uptimeMillis() - zaznam.getStartTime());
                zaznam.setUpdateTime(zaznam.getTimeBuff()+zaznam.getMillisecondTime());

                zaznam.setSeconds((int) (zaznam.getUpdateTime() / 1000));
                zaznam.setSeconds(zaznam.getSeconds()%60);

                stopkyTextView.setText(String.format("%01d", zaznam.getSeconds()) );

                handler.postDelayed(this, 0);
            }
        }
    };

    public void ulozitZaznam(View view) {

        String meno = menoPridajSEditText.getText().toString();
        int[] hodnoty = zaznam.getHodnoty();

        if(meno.isEmpty()){
            new AlertDialog.Builder(this)
                    .setMessage("Neviplnili ste meno!")
                    .setTitle("Upozornenie")
                    .setNeutralButton("Close", null)
                    .show();
        }else if(hodnoty[24] != 0){

                String poznmka = poznamkaPridajSEditText.getText().toString();

                Uri uri = Provider.CONTENT_URI;
                ContentValues values = new ContentValues();
                values.put(Provider.Zaznam._ID, AUTOGENERATED_ID);
                values.put(Provider.Zaznam.MENO, meno);
                values.put(Provider.Zaznam.DATUM_A_CAS, System.currentTimeMillis() / 1000L);
                values.put(Provider.Zaznam.POZNAMKA, poznmka);


                values.put(Provider.Zaznam.HL1, hodnoty[1]);
                values.put(Provider.Zaznam.HL2, hodnoty[2]);
                values.put(Provider.Zaznam.HL3, hodnoty[3]);
                values.put(Provider.Zaznam.HL4, hodnoty[4]);
                values.put(Provider.Zaznam.HL5, hodnoty[5]);
                values.put(Provider.Zaznam.HL6, hodnoty[6]);

                values.put(Provider.Zaznam.HR1, hodnoty[7]);
                values.put(Provider.Zaznam.HR2, hodnoty[8]);
                values.put(Provider.Zaznam.HR3, hodnoty[9]);
                values.put(Provider.Zaznam.HR4, hodnoty[10]);
                values.put(Provider.Zaznam.HR5, hodnoty[11]);
                values.put(Provider.Zaznam.HR6, hodnoty[12]);

                values.put(Provider.Zaznam.FL1, hodnoty[13]);
                values.put(Provider.Zaznam.FL2, hodnoty[14]);
                values.put(Provider.Zaznam.FL3, hodnoty[15]);
                values.put(Provider.Zaznam.FL4, hodnoty[16]);
                values.put(Provider.Zaznam.FL5, hodnoty[17]);
                values.put(Provider.Zaznam.FL6, hodnoty[18]);

                values.put(Provider.Zaznam.FR1, hodnoty[19]);
                values.put(Provider.Zaznam.FR2, hodnoty[20]);
                values.put(Provider.Zaznam.FR3, hodnoty[21]);
                values.put(Provider.Zaznam.FR4, hodnoty[22]);
                values.put(Provider.Zaznam.FR5, hodnoty[23]);
                values.put(Provider.Zaznam.FR6, hodnoty[24]);

                AsyncQueryHandler insertHandler = new AsyncQueryHandler(getContentResolver()) {
                    @Override
                    protected void onDeleteComplete(int token, Object cookie, int result) {
                        Toast.makeText(PridajStopkamiActivity.this, "Záznam bol uložený", Toast.LENGTH_SHORT)
                                .show();
                    }
                };

                insertHandler.startInsert(0, null, uri, values);

                Intent intent = new Intent(getApplicationContext(), ZaznamListActivity.class);
                startActivity(intent);

            } else {
                new AlertDialog.Builder(this)
                        .setMessage("Neviplnili ste všetky namerané hodnoty!")
                        .setTitle("Upozornenie")
                        .setNeutralButton("Close", null)
                        .show();
            }
    }
}
